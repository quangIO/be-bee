plugins {
  id 'org.jetbrains.kotlin.jvm' version '1.3.61'
  id 'application'
  id 'com.github.johnrengelman.shadow' version '5.0.0'
  id 'nu.studer.jooq' version '4.0'
}

group = 'quang.to'
version = '1.0.0-SNAPSHOT'

repositories {
  mavenCentral()
  jcenter()
}

ext {
  kotlinVersion = '1.3.20'
  vertxVersion = '3.8.4'
  junitJupiterEngineVersion = '5.4.0'
}

application {
  mainClassName = 'io.vertx.core.Launcher'
}

jooq {
  bee(sourceSets.main) {
    jdbc {
      driver = 'org.postgresql.Driver'
      url = 'jdbc:postgresql:takehome'
      user = 'quangio'
    }
    generator {
      name = 'org.jooq.codegen.DefaultGenerator'
      database {
        name = 'org.jooq.meta.postgres.PostgresDatabase'
        includes = '.*'
        excludes = ''
        inputSchema = 'public'
      }
      target {
        packageName = 'jooq.codegen'
        directory = 'target/generated-sources/jooq'
      }
      generate {
        daos = true
        javaTimeTypes = true
      }
    }
  }
}

def mainVerticleName = 'quang.to.bee.MainVerticle'
def watchForChange = 'src/**/*'
def doOnChange = './gradlew classes'

dependencies {
  implementation "io.vertx:vertx-junit5:$vertxVersion"
  implementation "io.vertx:vertx-web:$vertxVersion"
  implementation "io.vertx:vertx-grpc:$vertxVersion"
  implementation "io.vertx:vertx-lang-kotlin-coroutines:$vertxVersion"
  implementation "io.vertx:vertx-lang-kotlin:$vertxVersion"
  implementation "org.jooq:jooq"
  implementation "org.postgresql:postgresql:42.2.9"
  implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.10.1"
  jooqRuntime "org.postgresql:postgresql:42.2.9"

  testImplementation "io.vertx:vertx-junit5:$vertxVersion"
  testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterEngineVersion"
  testImplementation "org.junit.jupiter:junit-jupiter-api:$junitJupiterEngineVersion"
}

compileKotlin {
  kotlinOptions.jvmTarget = '1.8'
}

compileTestKotlin {
  kotlinOptions.jvmTarget = '1.8'
}


shadowJar {
  manifest {
    attributes 'Main-Verticle': mainVerticleName
  }
  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

test {
  useJUnitPlatform()
  testLogging {
    events 'PASSED', 'FAILED', 'SKIPPED'
  }
}

run {
  args = ['run', mainVerticleName, "--redeploy=$watchForChange", "--launcher-class=$mainClassName", "--on-redeploy=$doOnChange"]
}
